JavaScript 

211222

html과 javascript의 차이는 각각 정적, 동적이라는 것

javascript에서 on~으로 시작하는 속성(attribute)는 event 라고 하며 브라우저에서
어떠한 상호작용이 되는 것을 말한다.

211223

브라우저의 검사 - console 로 들어가면 여러 가지 JavaScript 기능을 사용할 수 있음


211224


6. 데이터타입 - 문자열과 숫자

7. 변수와 대입연산자

자바에서 변수 사용시 var 사용 (var name = 'asdf';)

8. 웹브라우저 제어

style = <- 여기에 오는 언어는 css라고 하는 디자인 언어

9. CSS 기초 : style 속성

style : "color:powderblue" 에서 "color:powderblue" 부분은 속성(property) 라고 한다

여러 속성의 구분은 ;

-> 어떤 특정 태그를 CSS라는 언어로 디자인하고 싶을 때는 style이라는 속성을 쓰고 
그 안에 CSS의 속성이라는 문법을 사용하면 된다.

10. style 태그


<div> <span>(줄바꿈 안함)

-> 어떤 글자를 감싸고 싶을 때 사용하는 의미 없는 태그

11. 선택자
-> 여러 개의 태그를 선택하는 방법

<style>
        .js{
            font-weight: bold;
        }
 </style>

<span class = "js">JavaScript</span>

class는 style 태그 안에서 .을 붙이도록 약속되어있고, id는 #을 붙인다.

class : 무언가를 그룹핑한다 -> 포괄적
id : 어떤 것을 식별한다 -> 타겟팅, primary key 
-> 우선순위가 있다 class < id

12. 제어할 태그 선택

<body style=""> 등의 태그 안에서는 CSS 문법을 사용하지만,

<input type="button" value="night" onclick="
   document.querySelector('body').style.backgroundColor = 'black'
   document.querySelector('body').style.color = 'white'
   ">

와 같이 onclick 등의 이벤트에선 JavaScript 문법으로 다르게 적어줘야 한다.

17. 조건문의 활용

-> 토글 버튼 만들기

<input id="night_day" type="button" value="night" onclick="
   if (document.querySelector('#night_day').value === 'night'){
   document.querySelector('body').style.backgroundColor = 'black'
   document.querySelector('body').style.color = 'white'
   document.querySelector('#night_day').value = 'day'
   }else{
   document.querySelector('body').style.backgroundColor = 'white'
   document.querySelector('body').style.color = 'black'
   document.querySelector('#night_day').value = 'night'}
   ">


18. 리팩토링 중복의 제거

리팩토링(refactoring) -> 코드의 중복성을 낮추고 가독성과 유지보수성을 높여 개선하는 작업

-> 틈틈히 해줘야 좋은 sw를 제작할 수 있음

-위 코드를 이렇게 바꿈.
<input type="button" value="night" onclick="
   if (this.value === 'night'){
   document.querySelector('body').style.backgroundColor = 'black'
   document.querySelector('body').style.color = 'white'
   this.value = 'day'
   }else{
   document.querySelector('body').style.backgroundColor = 'white'
   document.querySelector('body').style.color = 'black'
   this.value = 'night'}
   ">

this를 통해 자기 자신을 참조함으로서 변수명이 중복될 걱정이 사라지고 유지보수성이 올라감

플밍 잘하는 법 -> 중복 끝까지 다 없애버리기

->
<input type="button" value="night" onclick="
   var target = document.querySelector('body');
   if (this.value === 'night'){
   target.style.backgroundColor = 'black'
   target.style.color = 'white'
   this.value = 'day'
   }else{
   target.style.backgroundColor = 'white'
   target.style.color = 'black'
   this.value = 'night'}
   ">

var target 이란 변수를 사용해서 중복된 코드를 제거

23. 반복문 활용

<input type="button" value="night" onclick="
   var target = document.querySelector('body');
   if (this.value === 'night'){
   target.style.backgroundColor = 'black'
   target.style.color = 'white'
   this.value = 'day'
   
   var alist = document.querySelectorAll('a');
   var i = 0;
   while(i < alist.length){
       alist[i].style.color = 'powderblue';
       i = i + 1;
   }
   
   }else{
   target.style.backgroundColor = 'white'
   target.style.color = 'black'
   this.value = 'night'
   
   var alist = document.querySelectorAll('a');
   var i = 0;
       while(i < alist.length){
           alist[i].style.color = 'blue';
           i = i + 1;
       }
   }
   ">

링크('a')의 모든 속성들의 값을 바꿀 때 while 반복문을 사용해서 
css의 속성값을 변경해줄 수 있다.

24. JS에서의 함수
-> 코드의 단순화

26. 매개변수와 인자

function sum (left, right){
            document.write(left + right + '<br>');
        }
        sum(2,3); //5
        sum(3,4); //7

2,3 3,4 -> 인자 (argument)
left, right -> 매개변수 (parameter)

29. 객체
